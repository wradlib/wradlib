name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - created

  workflow_dispatch:

jobs:
  lint:
    name: lint and style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
      - name: Lint with flake8
        run: |
          flake8 .
      - name: Black style check
        run: |
          black --check .
      - name: Isort import check
        run: |
          isort --check .

  build_0:
    name: wradlib tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      WRADLIB_DATA: ./wradlib-data
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.6.0
      with:
        access_token: ${{ github.token }}
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: install micromamba
      run: |
        wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj bin/micromamba --strip-components=1
        mv "$HOME/.bashrc" .bashrcBAK
        touch "$HOME/.bashrc"
        ./micromamba shell init -s bash -p ~/micromamba
        cat "$HOME/.bashrc" >> "$HOME/.bash_profile"
        mv .bashrcBAK "$HOME/.bashrc"
    - name: Install deps
      run: |
        micromamba create --yes -n wradlib-tests python=${{ matrix.python-version }} --file requirements.txt --file requirements_devel.txt --channel conda-forge
        echo "set -eo pipefail" >> "$HOME/.bash_profile"
        echo "micromamba activate wradlib-tests" >> "$HOME/.bash_profile"
    - name: Install wradlib
      run: |
        python setup.py sdist
        python -m pip install . --no-deps
    - name: Clone wradlib-data
      run: |
        git clone https://github.com/wradlib/wradlib-data.git
    - name: Test with pytest
      run: |
        echo $WRADLIB_DATA
        export WRADLIB_DATA=`realpath $WRADLIB_DATA`
        pytest -n auto --verbose --doctest-modules --durations=15 --cov-report xml:coverage.xml --cov=wradlib --pyargs wradlib
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.2.1
      with:
        env_vars: OS,PYTHON
        name: codecov-gha
        fail_ci_if_error: true

  trigger_rtd:
    if: github.event_name == 'push' || github.event_name == 'release'
    needs: [lint, build_0]
    name: trigger readthedocs
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      RTD_TOKEN: ${{ secrets.RTD_TOKEN }}
      RTD_URL: ${{ secrets.RTD_URL }}
    steps:
    - name: trigger readthedocs
      run: |
        curl -X POST -d "token=$RTD_TOKEN" "$RTD_URL"

  upload_testpypi:
    if: github.event_name == 'push' || github.event_name == 'release'
    needs: [lint, build_0]
    name: deploy to testpypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver setuptools wheel twine
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python setup.py sdist
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*

  upload_pypi:
    if: github.event_name == 'release'
    needs: [lint, build_0, upload_testpypi]
    name: deploy to pypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver setuptools wheel twine
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python setup.py sdist
          twine upload dist/*
