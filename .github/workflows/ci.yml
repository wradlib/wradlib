name: CI
env:
  micromamba_version: 0.17.0

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types:
      - created

  workflow_dispatch:

jobs:
  lint:
    name: lint and style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
      - name: Lint with flake8
        run: |
          flake8 .
      - name: Black style check
        run: |
          black --check .
      - name: Isort import check
        run: |
          isort --check .

  build_0:
    name: wradlib unit tests - linux
    runs-on: ubuntu-latest
    needs: [lint]
    defaults:
      run:
        shell: bash -l {0}
    env:
      WRADLIB_DATA: ./wradlib-data
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: install micromamba
      run: |
        echo ${micromamba_version}
        wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/${micromamba_version} | tar -xvj bin/micromamba --strip-components=1
        mv "$HOME/.bashrc" .bashrcBAK
        touch "$HOME/.bashrc"
        ./micromamba shell init -s bash -p ~/micromamba
        cat "$HOME/.bashrc" >> "$HOME/.bash_profile"
        mv .bashrcBAK "$HOME/.bashrc"
    - name: Install deps
      run: |
        if [ ${{ matrix.python-version }} != "3.10" ]
        then
          echo "cartopy" >> ci/requirements/unittests.txt
        fi
        micromamba create -y -n wradlib-tests python=${{ matrix.python-version }} -f ci/requirements/unittests.txt --channel conda-forge
        echo "set -eo pipefail" >> "$HOME/.bash_profile"
        echo "micromamba activate wradlib-tests" >> "$HOME/.bash_profile"
    - name: Install wradlib
      run: |
        python setup.py sdist
        python -m pip install . --no-deps
    - name: Clone wradlib-data
      run: |
        git clone https://github.com/wradlib/wradlib-data.git
    - name: Version Info
      run: |
        micromamba list
        python -c "import wradlib; print(wradlib.version.full_version)"
        python -c "import wradlib; print(wradlib.show_versions())"
    - name: Test with pytest
      env:
        WRADLIB_EARTHDATA_USER: ${{ secrets.WRADLIB_EARTHDATA_USER }}
        WRADLIB_EARTHDATA_PASS: ${{ secrets.WRADLIB_EARTHDATA_PASS }}
      run: |
        echo $WRADLIB_DATA
        export WRADLIB_DATA=`realpath $WRADLIB_DATA`
        pytest -n auto --dist loadfile --verbose --doctest-modules --doctest-plus --durations=15 --cov-report xml:coverage.xml --cov=wradlib --pyargs wradlib
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.2.1
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: RUNNER_OS,PYTHON_VERSION
        name: codecov-gha
        fail_ci_if_error: false

  build_1:
    name: wradlib unit tests - macosx
    runs-on: macos-latest
    needs: [lint]
    defaults:
      run:
        shell: bash -l {0}
    env:
      WRADLIB_DATA: ./wradlib-data
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: install micromamba
      run: |
        echo ${micromamba_version}
        curl -Ls https://micromamba.snakepit.net/api/micromamba/osx-64/${micromamba_version} | tar -xvj bin/micromamba
        mv bin/micromamba .
        mv "$HOME/.bashrc" .bashrcBAK
        touch "$HOME/.bashrc"
        ./micromamba shell init -s bash -p ~/micromamba
        cat "$HOME/.bashrc" >> "$HOME/.bash_profile"
        mv .bashrcBAK "$HOME/.bashrc"
    - name: Install deps
      run: |
        echo "cartopy" >> ci/requirements/unittests.txt
        micromamba create -y -n wradlib-tests python=${{ matrix.python-version }} -f ci/requirements/unittests.txt --channel conda-forge
        echo "set -eo pipefail" >> "$HOME/.bash_profile"
        echo "micromamba activate wradlib-tests" >> "$HOME/.bash_profile"
    - name: Install wradlib
      run: |
        cat "$HOME/.bash_profile"
        python setup.py sdist
        python -m pip install . --no-deps
    - name: Clone wradlib-data
      run: |
        git clone https://github.com/wradlib/wradlib-data.git
    - name: Version Info
      run: |
        micromamba list
        python -c "import wradlib; print(wradlib.version.full_version)"
        python -c "import wradlib; print(wradlib.show_versions())"
    - name: Test with pytest
      env:
        WRADLIB_EARTHDATA_USER: ${{ secrets.WRADLIB_EARTHDATA_USER }}
        WRADLIB_EARTHDATA_PASS: ${{ secrets.WRADLIB_EARTHDATA_PASS }}
      run: |
        echo $WRADLIB_DATA
        export WRADLIB_DATA=`python -c "import os, sys; print(os.path.realpath(sys.argv[1]))" $WRADLIB_DATA`
        pytest -n auto --verbose --doctest-modules --doctest-plus --durations=15 --cov-report xml:coverage.xml --cov=wradlib --pyargs wradlib
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.2.1
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: RUNNER_OS,PYTHON_VERSION
        name: codecov-gha
        fail_ci_if_error: false

  build_2:
    name: wradlib unit tests - windows
    runs-on: windows-latest
    needs: [lint]
    defaults:
      run:
        shell: bash
    env:
      WRADLIB_DATA: ./wradlib-data
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: install micromamba
        run: |
          $Env:micromamba_version
          Invoke-Webrequest -URI https://micromamba.snakepit.net/api/micromamba/win-64/$Env:micromamba_version -OutFile micromamba.tar.bz2
          C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar.bz2 -aoa
          C:\PROGRA~1\7-Zip\7z.exe x micromamba.tar -ttar -aoa -r Library\bin\micromamba.exe
          MOVE -Force Library\bin\micromamba.exe micromamba.exe
          .\micromamba.exe shell init -s powershell -p $HOME/micromamba
        shell: powershell
      - name: Install deps
        run: |
          $Env:MAMBA_ROOT_PREFIX=(Join-Path -Path $HOME -ChildPath micromamba)
          $Env:MAMBA_EXE=(Join-Path -Path (Get-Location) -ChildPath micromamba.exe)
          Add-Content ci/requirements/unittests.txt "cartopy"
          .\micromamba.exe create -y -n wradlib-tests python=${{ matrix.python-version }} -f ci/requirements/unittests.txt --channel conda-forge
        shell: powershell
      - name: Install wradlib
        run: |
          eval "$(./micromamba shell hook -s bash)"
          micromamba activate wradlib-tests
          python setup.py sdist
          python -m pip install . --no-deps
      - name: Clone wradlib-data
        run: |
          git clone https://github.com/wradlib/wradlib-data.git
      - name: Version Info
        run: |
          eval "$(./micromamba shell hook -s bash)"
          micromamba activate wradlib-tests
          micromamba list
          python -c "import wradlib; print(wradlib.version.full_version)"
          python -c "import wradlib; print(wradlib.show_versions())"
      - name: Test with pytest
        env:
          WRADLIB_EARTHDATA_USER: ${{ secrets.WRADLIB_EARTHDATA_USER }}
          WRADLIB_EARTHDATA_PASS: ${{ secrets.WRADLIB_EARTHDATA_PASS }}
        run: |
          eval "$(./micromamba shell hook -s bash)"
          micromamba activate wradlib-tests
          pytest -n auto --verbose --doctest-modules --doctest-plus --durations=15 --cov-report xml:coverage.xml --cov=wradlib --pyargs wradlib
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.2.1
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: RUNNER_OS,PYTHON_VERSION
          name: codecov-gha
          fail_ci_if_error: false

  build_3:
    name: wradlib notebook tests
    runs-on: ubuntu-latest
    needs: [lint]
    continue-on-error: true
    defaults:
      run:
        shell: bash -l {0}
    env:
      WRADLIB_DATA: ./wradlib-data
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: install micromamba
        run: |
          wget -qO- https://micromamba.snakepit.net/api/micromamba/linux-64/latest | tar -xvj bin/micromamba --strip-components=1
          mv "$HOME/.bashrc" .bashrcBAK
          touch "$HOME/.bashrc"
          ./micromamba shell init -s bash -p ~/micromamba
          cat "$HOME/.bashrc" >> "$HOME/.bash_profile"
          mv .bashrcBAK "$HOME/.bashrc"
      - name: Install deps
        run: |
          micromamba create -y -n wradlib-tests python=${{ matrix.python-version }} -f ci/requirements/notebooktests.txt --channel conda-forge
          echo "set -eo pipefail" >> "$HOME/.bash_profile"
          echo "micromamba activate wradlib-tests" >> "$HOME/.bash_profile"
      - name: Install wradlib
        run: |
          python setup.py sdist
          python -m pip install . --no-deps
      - name: Clone wradlib-data
        run: |
          git clone https://github.com/wradlib/wradlib-data.git
      - name: Clone wradlib-notebooks
        run: |
          git clone --depth 1 https://github.com/wradlib/wradlib-notebooks.git notebooks
      - name: Version Info
        run: |
          micromamba list
          python -c "import wradlib; print(wradlib.version.full_version)"
          python -c "import wradlib; print(wradlib.show_versions())"
      - name: Test with pytest
        env:
          WRADLIB_EARTHDATA_USER: ${{ secrets.WRADLIB_EARTHDATA_USER }}
          WRADLIB_EARTHDATA_PASS: ${{ secrets.WRADLIB_EARTHDATA_PASS }}
        run: |
          echo $WRADLIB_DATA
          export WRADLIB_DATA=`realpath $WRADLIB_DATA`
          pytest -n auto --verbose --durations=15 --cov-report xml:coverage.xml --cov=wradlib --pyargs notebooks
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.2.1
        with:
          file: ./coverage.xml
          flags: notebooktests
          env_vars: RUNNER_OS,PYTHON_VERSION
          name: codecov-gha
          fail_ci_if_error: false

  trigger_rtd:
    if: github.event_name == 'push' || github.event_name == 'release'
    needs: [lint, build_0, build_1, build_2]
    name: trigger readthedocs
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      RTD_TOKEN: ${{ secrets.RTD_TOKEN }}
      RTD_URL: ${{ secrets.RTD_URL }}
    steps:
    - name: trigger readthedocs
      run: |
        curl -X POST -d "token=$RTD_TOKEN" "$RTD_URL"

  upload_testpypi:
    if: github.event_name == 'push' || github.event_name == 'release'
    needs: [lint, build_0, build_1, build_2]
    name: deploy to testpypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver setuptools wheel twine
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python setup.py sdist
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*

  upload_pypi:
    if: github.event_name == 'release'
    needs: [lint, build_0, build_1, build_2, upload_testpypi]
    name: deploy to pypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver setuptools wheel twine
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python setup.py sdist
          twine upload dist/*
