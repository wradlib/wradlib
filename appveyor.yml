environment:

  CONDA_PATH: "C:\\Miniconda37-x64"

  matrix:
    - PYTHON_VERSION: "3.7"

install:
  # clone wradlib-data
  - ps: |
      & cmd /C "git clone https://github.com/wradlib/wradlib-data.git C:\projects\wradlib\wradlib-data 2>&1"
  # Use the pre-installed Miniconda for the desired arch
  - ps: if($env:PLATFORM -eq 'x64')
          { $env:CONDA_PATH="$($env:CONDA_PATH)-x64" }
  - ps: $env:path="$($env:CONDA_PATH);$($env:CONDA_PATH)\Scripts;$($env:CONDA_PATH)\Library\bin;C:\cygwin\bin;$($env:PATH)"
  # set WRADLIB_DATA
  - ps: $env:WRADLIB_DATA="C:\projects\wradlib\wradlib-data"

  # Create and activate a conda environment with the wanted Python version
  - "conda update --yes --quiet conda"
  - "conda config --set changeps1 no"
  - "conda config --add channels conda-forge"
  - "conda config --set channel_priority strict"
  - "conda create --yes --quiet -n wradlib python=%PYTHON_VERSION%"
  - "activate wradlib"

  # Install wradlib dependecies
  - "conda install -y -q gdal numpy scipy matplotlib netcdf4 h5py xarray cartopy deprecation xmltodict coverage codecov pytest pytest-cov pytest-xdist pytest-sugar"
  # install latest semver from PyPI
  - "pip install semver"

  # Some checks
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "conda list"

  # build wradlib
  - "python setup.py sdist"
  - "python -m pip install . --no-deps --ignore-installed --no-cache-dir"

build: false

test_script:
  - "if \"%PYTHON_VERSION%\"==\"3.7\" (pytest -v --doctest-modules --durations=15 wradlib)"
